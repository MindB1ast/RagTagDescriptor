import streamlit as st
import json
import os
import uuid
import time
from dotenv import load_dotenv
import chromadb
from chromadb import EmbeddingFunction, Documents, Embeddings
import google.generativeai as genai

# --- –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ ---
load_dotenv()
genai.configure(api_key=os.getenv("GEMENI_API_KEY"))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChromaDB ---
CHROMA_PATH = "./chroma_db"
COLLECTION_NAME = "tag_docs"

# --- –§—É–Ω–∫—Ü–∏—è —ç–º–±–µ–Ω–¥–∏–Ω–≥–∞ ---
class GeminiEmbeddingFunction(EmbeddingFunction):
    def __call__(self, input: Documents) -> Embeddings:
        model = 'models/embedding-001'
        title = "tags"
        return genai.embed_content(
            model=model,
            content=input,
            task_type="retrieval_document",
            title=title
        )["embedding"]

# --- –†–∞–±–æ—Ç–∞ —Å ChromaDB ---
def get_chroma_db():
    chroma_client = chromadb.PersistentClient(path=CHROMA_PATH)
    return chroma_client.get_or_create_collection(name=COLLECTION_NAME, embedding_function=GeminiEmbeddingFunction())

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç–º–±–µ–Ω–¥–∏–Ω–≥–∞ ---
def format_entry(tag_dict):
    return f"""Tag: {tag_dict['tag']}
Description: {tag_dict['description']}
Instruction: {tag_dict.get('merge_instruction', '')}
Category: {tag_dict.get('category', '')}
"""

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å ChromaDB ---
def get_tag_id(tag_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏"""
    return f"tag_{hash(tag_name) % (10**8)}"

def sync_tag_to_chroma(tag_data, db):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥ –≤ ChromaDB"""
    tag_id = get_tag_id(tag_data['tag'])
    doc_str = format_entry(tag_data)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–µ–≥
        existing = db.get(ids=[tag_id])
        if existing['ids']:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            db.update(ids=[tag_id], documents=[doc_str])
            return f"Updated tag '{tag_data['tag']}' in ChromaDB"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            db.add(documents=[doc_str], ids=[tag_id])
            return f"Added tag '{tag_data['tag']}' to ChromaDB"
    except Exception as e:
        return f"Error syncing tag '{tag_data['tag']}': {str(e)}"

def remove_tag_from_chroma(tag_name, db):
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–≥ –∏–∑ ChromaDB"""
    tag_id = get_tag_id(tag_name)
    try:
        db.delete(ids=[tag_id])
        return f"Removed tag '{tag_name}' from ChromaDB"
    except Exception as e:
        return f"Error removing tag '{tag_name}': {str(e)}"

def get_chroma_status():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –µ—Å—Ç—å –≤ ChromaDB"""
    try:
        db = get_chroma_db()
        all_items = db.get()
        chroma_ids = set(all_items['ids'])
        return chroma_ids, db
    except Exception as e:
        st.error(f"Error accessing ChromaDB: {e}")
        return set(), None

def check_sync_status(tags_data, chroma_ids):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤ —Å ChromaDB"""
    sync_status = {}
    for tag in tags_data:
        tag_id = get_tag_id(tag['tag'])
        sync_status[tag['tag']] = tag_id in chroma_ids
    return sync_status

# --- –†–∞–±–æ—Ç–∞ —Å JSON ---
JSON_PATH = "tag_docs.json"

def load_tags():
    if os.path.exists(JSON_PATH):
        with open(JSON_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_tags(data):
    with open(JSON_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

tags_data = load_tags()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="Tag Documentation", layout="wide")
st.title("üß∑ Tag Documentation Editor")

# --- –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å ChromaDB ---
chroma_ids, db = get_chroma_status()
sync_status = check_sync_status(tags_data, chroma_ids) if db else {}

# --- –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
col1, col2 = st.columns([2, 1])

with col1:
    # --- –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä ---
    search_query = st.text_input("Search", "")
    filtered_tags = [tag for tag in tags_data if search_query.lower() in tag["tag"].lower()]
    existing_tag_names = [t["tag"] for t in filtered_tags]

    selected_tag = st.selectbox("Choose existing tag to edit", [""] + existing_tag_names)
    new_tag_input = st.text_input("Or enter a new tag to create", "")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–≥
    if new_tag_input.strip():
        current_tag = new_tag_input.strip()
        tag_data = {"tag": current_tag, "description": "", "merge_instruction": "", "category": ""}
    elif selected_tag:
        current_tag = selected_tag
        tag_data = next((t for t in tags_data if t["tag"] == selected_tag), {"tag": "", "description": "", "merge_instruction": "", "category": ""})
    else:
        current_tag = ""
        tag_data = {"tag": "", "description": "", "merge_instruction": "", "category": ""}

    # --- –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    with st.form("tag_form"):
        st.text_input("Tag", value=tag_data.get("tag", ""), disabled=True)
        description = st.text_area("Description", tag_data.get("description", ""))
        merge_instruction = st.text_area("Merge Instruction (optional)", tag_data.get("merge_instruction", ""))
        category = st.text_input("Category (optional)", tag_data.get("category", ""))

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        col_save, col_delete = st.columns(2)
        
        with col_save:
            submitted = st.form_submit_button("üíæ Save", use_container_width=True)
        
        with col_delete:
            delete_clicked = st.form_submit_button("üóëÔ∏è Delete", use_container_width=True, type="secondary")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if submitted and current_tag:
            new_entry = {
                "tag": current_tag,
                "description": description.strip(),
                "merge_instruction": merge_instruction.strip(),
                "category": category.strip()
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º JSON
            tags_data = [t for t in tags_data if t["tag"] != current_tag]
            tags_data.append(new_entry)
            save_tags(tags_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º ChromaDB
            if db:
                try:
                    result = sync_tag_to_chroma(new_entry, db)
                    st.success(f"‚úÖ {result}")
                    time.sleep(0.5)
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Failed to sync with ChromaDB: {e}")
            else:
                st.warning("‚ö†Ô∏è Saved to JSON, but ChromaDB is not available")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        if delete_clicked and current_tag and selected_tag:
            # –£–¥–∞–ª—è–µ–º –∏–∑ JSON
            tags_data = [t for t in tags_data if t["tag"] != current_tag]
            save_tags(tags_data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ ChromaDB
            if db:
                try:
                    result = remove_tag_from_chroma(current_tag, db)
                    st.success(f"‚úÖ Deleted '{current_tag}' from both JSON and ChromaDB")
                    time.sleep(0.5)
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Deleted from JSON, but failed to remove from ChromaDB: {e}")
            else:
                st.warning(f"‚ö†Ô∏è Deleted '{current_tag}' from JSON, but ChromaDB is not available")

with col2:
    # --- –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ---
    st.markdown("### üîÑ Sync Status")
    
    if not db:
        st.error("‚ùå ChromaDB not available")
    else:
        st.success(f"‚úÖ ChromaDB connected ({len(chroma_ids)} items)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
        if sync_status:
            synced_count = sum(sync_status.values())
            st.write(f"**Synced: {synced_count}/{len(sync_status)}**")
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if st.button("üîÑ Sync All Tags"):
                progress_bar = st.progress(0)
                for i, tag in enumerate(tags_data):
                    try:
                        sync_tag_to_chroma(tag, db)
                        progress_bar.progress((i + 1) / len(tags_data))
                        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    except Exception as e:
                        st.error(f"Failed to sync {tag['tag']}: {e}")
                st.success("‚úÖ All tags synced!")
                st.rerun()
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if st.checkbox("Show detailed sync status"):
                for tag_name, is_synced in sync_status.items():
                    status_icon = "‚úÖ" if is_synced else "‚ùå"
                    st.write(f"{status_icon} {tag_name}")

# --- –°–∞–π–¥–±–∞—Ä —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ---
st.sidebar.markdown("### üìä Statistics")
st.sidebar.write(f"**Total tags in JSON:** {len(tags_data)}")
if db:
    st.sidebar.write(f"**Records in ChromaDB:** {len(chroma_ids)}")
    st.sidebar.info("üí° Note: ChromaDB may have more records than tags if there are duplicates or old entries")

st.sidebar.markdown("### üìö Existing Categories")
categories = sorted(set(tag["category"] for tag in tags_data if tag.get("category")))
for cat in categories:
    st.sidebar.write(f"- {cat}")

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
if st.sidebar.checkbox("üìã Show ChromaDB Analysis"):
    if db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_data = db.get(include=['documents'])
            
            if all_data and all_data['documents']:
                st.sidebar.markdown("#### üîç Document Analysis")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                tag_docs = []
                other_docs = []
                
                for i, doc in enumerate(all_data['documents']):
                    if doc.startswith("Tag: "):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–µ–≥–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        lines = doc.split('\n')
                        tag_name = lines[0].replace("Tag: ", "").strip()
                        tag_docs.append(tag_name)
                    else:
                        other_docs.append(doc[:50] + "..." if len(doc) > 50 else doc)
                
                st.sidebar.write(f"**Tag documents:** {len(tag_docs)}")
                if tag_docs:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
                    unique_tags = list(set(tag_docs))
                    st.sidebar.write(f"**Unique tags found:** {len(unique_tags)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    duplicates = len(tag_docs) - len(unique_tags)
                    if duplicates > 0:
                        st.sidebar.warning(f"‚ö†Ô∏è Found {duplicates} duplicate entries!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤
                    if st.sidebar.checkbox("Show found tags"):
                        for tag in sorted(unique_tags)[:10]:
                            st.sidebar.write(f"‚Ä¢ {tag}")
                        if len(unique_tags) > 10:
                            st.sidebar.write(f"... –∏ –µ—â—ë {len(unique_tags) - 10}")
                
                if other_docs:
                    st.sidebar.write(f"**Non-tag documents:** {len(other_docs)}")
                    if st.sidebar.checkbox("Show non-tag docs"):
                        for doc in other_docs[:3]:
                            st.sidebar.write(f"‚Ä¢ {doc}")
                        
        except Exception as e:
            st.sidebar.error(f"Error analyzing ChromaDB: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ ChromaDB ---
def get_all_chroma_documents():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ ChromaDB —Å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    try:
        db = get_chroma_db()
        all_data = db.get(include=['documents'])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª 'ids' –∏–∑ include
        return all_data
    except Exception as e:
        st.error(f"Error getting ChromaDB documents: {e}")
        return None

def clean_orphaned_chroma_entries(tags_data):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ ChromaDB, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ JSON"""
    if not db:
        return "ChromaDB not available"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ ID –∏–∑ JSON
    expected_ids = {get_tag_id(tag['tag']) for tag in tags_data}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ ChromaDB
    all_data = db.get()
    existing_ids = set(all_data['ids'])
    
    # –ù–∞—Ö–æ–¥–∏–º –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    orphaned_ids = existing_ids - expected_ids
    
    if orphaned_ids:
        try:
            db.delete(ids=list(orphaned_ids))
            return f"Removed {len(orphaned_ids)} orphaned entries from ChromaDB"
        except Exception as e:
            return f"Error removing orphaned entries: {e}"
    else:
        return "No orphaned entries found"

def search_tag_in_chroma(tag_name):
    """–ò—â–µ—Ç —Ç–µ–≥ –≤ ChromaDB –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        all_data = get_all_chroma_documents()
        if not all_data:
            return []
        
        matches = []
        for i, doc in enumerate(all_data['documents']):
            if tag_name.lower() in doc.lower():
                matches.append({
                    'id': all_data['ids'][i],
                    'document': doc,
                    'exact_match': f"Tag: {tag_name}" in doc
                })
        return matches
    except Exception as e:
        st.error(f"Error searching in ChromaDB: {e}")
        return []

# --- –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
if st.sidebar.checkbox("üîß Debug Info"):
    st.sidebar.markdown("### Debug Information")
    st.sidebar.write(f"Current tag: {current_tag}")
    if current_tag:
        tag_id = get_tag_id(current_tag)
        st.sidebar.write(f"Tag ID: {tag_id}")
        if db:
            is_in_chroma = tag_id in chroma_ids
            st.sidebar.write(f"In ChromaDB: {is_in_chroma}")
            
            # –ü–æ–∏—Å–∫ —Ç–µ–≥–∞ –≤ ChromaDB –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            matches = search_tag_in_chroma(current_tag)
            if matches:
                st.sidebar.write(f"Found {len(matches)} matches in ChromaDB:")
                for match in matches:
                    exact = "üéØ" if match['exact_match'] else "üìÑ"
                    st.sidebar.write(f"{exact} ID: {match['id'][:8]}...")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ChromaDB ---
st.sidebar.markdown("### üõ†Ô∏è ChromaDB Management")

if st.sidebar.button("üîç Show All ChromaDB Entries"):
    all_data = get_all_chroma_documents()
    if all_data:
        st.sidebar.write(f"**Total entries in ChromaDB: {len(all_data['ids'])}**")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–ø–∏—Å–µ–π
        tag_entries = []
        other_entries = []
        
        for i, doc in enumerate(all_data['documents']):
            entry = {
                'id': all_data['ids'][i],
                'document': doc[:100] + "..." if len(doc) > 100 else doc
            }
            
            if doc.startswith("Tag: "):
                tag_entries.append(entry)
            else:
                other_entries.append(entry)
        
        if tag_entries:
            st.sidebar.write(f"**Tag entries: {len(tag_entries)}**")
            for entry in tag_entries[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                st.sidebar.text(f"ID: {entry['id'][:8]}...")
                st.sidebar.text(f"Doc: {entry['document']}")
                st.sidebar.write("---")
        
        if other_entries:
            st.sidebar.write(f"**Other entries: {len(other_entries)}**")

if st.sidebar.button("üßπ Clean Orphaned Entries"):
    result = clean_orphaned_chroma_entries(tags_data)
    st.sidebar.success(result)
    st.rerun()

if st.sidebar.button("‚ö†Ô∏è Clear All ChromaDB", type="secondary"):
    st.sidebar.warning("‚ö†Ô∏è This will DELETE ALL records from ChromaDB!")
    st.sidebar.write("Use this if you want to start fresh and re-sync all tags")
    if st.sidebar.checkbox("I confirm clearing ALL ChromaDB data"):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ ChromaDB
            all_data = db.get()
            if all_data['ids']:
                db.delete(ids=all_data['ids'])
                st.sidebar.success(f"‚úÖ Deleted {len(all_data['ids'])} records from ChromaDB")
            else:
                st.sidebar.info("ChromaDB is already empty")
            st.rerun()
        except Exception as e:
            st.sidebar.error(f"Error clearing ChromaDB: {e}")

# --- –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞ ---
st.sidebar.markdown("### üîé Search Specific Tag")
search_tag = st.sidebar.text_input("Search tag in ChromaDB:", "")
if search_tag and st.sidebar.button("Search"):
    matches = search_tag_in_chroma(search_tag)
    if matches:
        st.sidebar.write(f"Found {len(matches)} matches:")
        for match in matches:
            exact = "üéØ Exact" if match['exact_match'] else "üìÑ Partial"
            st.sidebar.write(f"{exact} - ID: {match['id'][:8]}...")
            st.sidebar.text(match['document'][:150] + "...")
            st.sidebar.write("---")
    else:
        st.sidebar.write("No matches found")